//  https://leetcode.com/problems/house-robber/  

//  Top down -- Memoization approach 
class Solution {
    int memo[];
    public int rob(int[] nums) {
        // return rob(nums, nums.length-1);
        memo = new int[nums.length + 1];
        Arrays.fill(memo, -1);
        return rob(nums, nums.length-1);
        
        
    }
    
    private int rob(int[] nums, int i){
        if(i < 0){
            return 0;
        }
        if(memo[i] >= 0){
            return memo[i];
        }
        int result = Math.max(rob(nums, i-2)+ nums[i], rob(nums, i-1));
        memo[i] = result;
        return result;
    }
}



//  Bottom up -- Tabulation approach

class Solution {
    int memo[];
    public int rob(int[] nums) {
        
        if(nums.length == 1){
            return nums[0];
        }
        
        int dp[] = new int [nums.length];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        
        for(int i=2;i<nums.length;i++){
            dp[i] = Math.max(dp[i-1], dp[i-2]+nums[i]);
        }
        
        return dp[nums.length-1];
        
        
    }
    
   
}
