//https://leetcode.com/explore/learn/card/dynamic-programming/631/strategy-for-solving-dp-problems/4040/

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        // for (int i = 2; i < cost.length; i++) {
        //     cost[i] += Math.min(cost[i-1], cost[i-2]);
        //     System.out.println(cost[i]);
        // }
        // return Math.min(cost[cost.length-1], cost[cost.length-2]);
        if(cost.length <= 1){
            return 0;
        }
        
        int dp[] = new int[cost.length];
        dp[0] = 0;//cost[0];
        dp[1] = 0;//Math.min(cost[0], cost[1]);
        for(int i=2;i<cost.length;i++){
            cost[i] += Math.min(cost[i-1], cost[i-2]);
        }
        
        return Math.min(cost[cost.length-1], cost[cost.length-2]);
    }
}
